; returns min(E, F)
function min:  
    jlt ret_min, E, F
    mov E, F
  ret_min:
    return E

; returns max(E, F)
function max:
    jgt ret_max, E, F
    mov E, F
  ret_max:
    return E

; swaps E and F
function swap:
    xor E, F
    xor F, E
    xor E, F
    return 0

; returns abs(E - F)
function dist:
    jgt calc_dist, E, F
    xor E, F ; swap
    xor F, E
    xor E, F
  calc_dist:
    sub E, F
    return E

function get_my_coords:
    int 3 ; ghost index -> A
    int 5 ; x, y -> A, B
    mov [0], A
    mov [1], B
    return 0

function get_lambda_coords:
    int 1
    mov [2], A
    mov [3], B
    return 0

; move (E, F) to direction D
function move:
    jeq move_up, D, 0
    jeq move_right, D, 1
    jeq move_down, D, 2
    jeq move_left, D, 3
  move_up:
    sub F, 1
    jeq ret_move, 0, 0
  move_right:
    add E, 1
    jeq ret_move, 0, 0
  move_down:
    add F, 1
    jeq ret_move, 0, 0
  move_left:
    sub E, 1
    jeq ret_move, 0, 0
  ret_move:
    return 0

; cell (A, B) has wall
function is_free:
    int 7
    jeq ret_is_free, A, 0
    mov A, 1
  ret_is_free:
    return A


; END OF FUNCTIONS

main:
    call get_lambda_coords
    call get_my_coords

    mov [101], 255  ; best dist
    mov G, 0        ; best move

    mov [99], 127   ; shift
    mov E, [0]
    mov F, [2]
    call dist
    sub [99], D
    mov E, [1]
    mov F, [3]
    call dist
    sub [99], D

    mov H, 0
  dir_loop:
      mov E, [0]
      mov F, [1]
      mov D, H
      call move  ; get moved cell
      mov [4], E
      mov [5], F
      mov A, E
      mov B, F
      call is_free
      jeq continue_dir_loop, D, 0  ; if wall then continue

      ; calc distance to lambda in [100]
      mov E, [2]
      mov F, [4]
      call dist
      mov [100], D
      mov E, [3]
      mov F, [5]
      call dist
      add D, [99]
      add [100], D

      jgt continue_dir_loop, [100], [101]
      mov [101], [100]
      mov G, H
    continue_dir_loop:
      add H, 1
      jlt dir_loop, H, 4

    mov A, G
    int 0
    hlt

